1
00:00:02,450 --> 00:00:06,560
I also mentioned this component lifecycle in the last lecture,

2
00:00:06,560 --> 00:00:09,160
what is the component lifecycle?

3
00:00:09,170 --> 00:00:13,570
The first important takeaway is, it's only available in class-based components.

4
00:00:13,610 --> 00:00:19,660
You will actually learn that functional components when using React hooks have an equivalent

5
00:00:19,660 --> 00:00:25,010
you could say but generally, it's only available in class-based components, that lifecycle and I will

6
00:00:25,010 --> 00:00:29,900
show you both of course, the lifecycle and the functional component equivalent

7
00:00:29,900 --> 00:00:33,450
in this module. So let's start with the class-based lifecycle.

8
00:00:33,500 --> 00:00:40,280
We've got these methods which we can add to any class-based component and React will execute them for

9
00:00:40,280 --> 00:00:46,670
us and they will run at different points of time and we can do different things with them, to for example

10
00:00:46,670 --> 00:00:53,450
fetch data from the web or to do some cleanup work before a component is removed from the DOM. But how

11
00:00:53,450 --> 00:00:59,680
exactly can we use them and in which order do they execute? Let's start with the component lifecycle

12
00:00:59,680 --> 00:01:01,320
during the component creation

13
00:01:01,330 --> 00:01:07,030
because we actually have to differentiate between lifecycle hooks that run whenever something changes

14
00:01:07,060 --> 00:01:12,280
in our component, some props for example and the lifecycle that runs when a component is rendered for

15
00:01:12,280 --> 00:01:15,910
the first time because it's rendered as part of a list

16
00:01:15,920 --> 00:01:19,330
or because we only conditionally show it.

17
00:01:19,630 --> 00:01:25,020
So when a component is created, then first of all the constructor executes.

18
00:01:25,030 --> 00:01:27,350
Now this is actually not a React lifecycle hook,

19
00:01:27,400 --> 00:01:28,570
instead it's a default

20
00:01:28,630 --> 00:01:30,420
ES6 class feature,

21
00:01:30,550 --> 00:01:35,980
the important thing there is this constructor will receive the props of this component and you have

22
00:01:35,980 --> 00:01:42,370
to call super props in the constructor. Only if you add it, so you don't have to add it just to make that

23
00:01:42,370 --> 00:01:42,890
call,

24
00:01:42,940 --> 00:01:47,950
it's done for you if you don't add it but if you add your own constructor where you will want to execute

25
00:01:47,950 --> 00:01:54,040
your own logic, you need to call super props in there and I'll show you all of that in action right after

26
00:01:54,040 --> 00:01:54,790
these slides here,

27
00:01:54,790 --> 00:01:55,950
no worries.

28
00:01:56,110 --> 00:01:57,660
Now what is the constructor

29
00:01:57,670 --> 00:02:04,320
therefore? You can do it for basic initialization work, for example for setting an initial state.

30
00:02:04,570 --> 00:02:08,550
What you shouldn't do here is cause side effects.

31
00:02:08,550 --> 00:02:11,610
Now the word side effect is relatively abstract,

32
00:02:11,650 --> 00:02:18,100
in the end it means things like sending a HTTP request or storing something in your local storage of the

33
00:02:18,100 --> 00:02:21,460
browser or sending some analytics to Google analytics.

34
00:02:21,460 --> 00:02:26,560
You don't really want to do things like that in the constructor because that can impact performance and

35
00:02:26,560 --> 00:02:34,270
cause unnecessary re-render cycles which of course are pretty bad and you want to avoid. After the constructor,

36
00:02:34,600 --> 00:02:41,860
getDerivedStateFromProps runs. That is a lifecycle hook that was added With React 16.3 and

37
00:02:41,980 --> 00:02:49,000
in the end, the idea here is that whenever your props change for your class-based component, you can sink

38
00:02:49,000 --> 00:02:54,220
your state to them and that will actually be very rare niche cases,

39
00:02:54,220 --> 00:03:00,790
let me be very honest, you'll not use that lifecycle hook a lot but if you have some scenario where props

40
00:03:00,790 --> 00:03:06,630
of your component can change and then you want to update some internal state of that component, then

41
00:03:06,630 --> 00:03:10,580
this is the hook to use and I will show you how that hook works as well.

42
00:03:10,600 --> 00:03:14,380
Now what you shouldn't do in there still is causing side effects,

43
00:03:14,410 --> 00:03:16,590
don't send HTTP requests in that hook,

44
00:03:16,660 --> 00:03:22,090
there are better places for that. Now after these two hooks, the render method executes.

45
00:03:22,090 --> 00:03:27,640
We already know that, that is the method that returns JSX and that is really its job.

46
00:03:27,640 --> 00:03:35,200
You should use it only to prepare the data as you need it to lay out your JSX code and to render the

47
00:03:35,200 --> 00:03:41,540
HTML code so to say. What you still shouldn't do in there is send HTTP requests or set any timeouts,

48
00:03:41,680 --> 00:03:49,990
so nothing which can block this rendering process. Now when render runs and you do render any other React

49
00:03:49,990 --> 00:03:52,210
components in this class-based component,

50
00:03:52,240 --> 00:03:54,740
then these child components will now be rendered.

51
00:03:54,790 --> 00:04:01,660
So every child component you included in your rendered component here will then be rendered as well

52
00:04:01,960 --> 00:04:08,190
and only once all child components were rendered and that their lifecycle looks finished, your lifecycle

53
00:04:08,290 --> 00:04:14,410
hook here will finish for the creation when componentDidMount gets called. componentDidMount is

54
00:04:14,410 --> 00:04:18,850
a very important lifecycle hook which you'll use a lot when you're working with class-based components

55
00:04:19,240 --> 00:04:22,380
because here, you can cause side effects.

56
00:04:22,510 --> 00:04:28,480
That is a typical hook you would use for making an HTTP request to get new data from the web.

57
00:04:28,480 --> 00:04:31,530
What you shouldn't do in here is update the state,

58
00:04:31,540 --> 00:04:38,460
so don't call set state in here unless it's in, let's say the then block of a promise after you sent

59
00:04:38,460 --> 00:04:44,470
an HTTP request but don't call set state in here synchronously. So you can definitely set up some code

60
00:04:44,500 --> 00:04:47,480
that executes in the future which then updates the state,

61
00:04:47,560 --> 00:04:52,780
for example when the response from the server is back but don't do it right away when componentDidMount

62
00:04:52,990 --> 00:04:58,480
runs that you immediately call set state because that will trigger a re-render cycle and that is

63
00:04:58,480 --> 00:05:00,350
bad for performance.

64
00:05:00,370 --> 00:05:02,380
Let's have a look at this in practice.
