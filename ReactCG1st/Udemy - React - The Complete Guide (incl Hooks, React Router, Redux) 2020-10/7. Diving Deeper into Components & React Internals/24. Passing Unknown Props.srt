1
00:00:02,270 --> 00:00:07,940
So now with the higher order component created, let's maybe also use it in the person.js file for a

2
00:00:07,940 --> 00:00:09,440
single person

3
00:00:09,440 --> 00:00:13,510
where I also want to have a class around it, right?

4
00:00:13,550 --> 00:00:19,190
I use my aux component here because I want to demonstrate the aux component but we actually have

5
00:00:19,190 --> 00:00:22,870
some CSS class code set up that we could use here.

6
00:00:22,970 --> 00:00:28,700
Now we can of course simply import withClass here from

7
00:00:31,840 --> 00:00:36,760
the higher order component folder and then the withClass file and then we can use this higher order

8
00:00:36,760 --> 00:00:39,070
component on the person component as well.

9
00:00:39,220 --> 00:00:45,190
It's not limited to being used in one component only, you can bring it into any component that needs

10
00:00:45,190 --> 00:00:46,360
the functionality

11
00:00:46,360 --> 00:00:52,510
this higher order component adds and the functionality this higher order component adds is that it adds

12
00:00:52,510 --> 00:00:55,280
a wrapping div with some CSS code.

13
00:00:55,660 --> 00:00:58,360
So therefore, let's now use it here,

14
00:00:59,650 --> 00:01:06,980
withClass and let's pass the person component as the first argument and the class I want to add is

15
00:01:06,980 --> 00:01:12,080
classes.person, using the CSS modules and this person class here.

16
00:01:15,110 --> 00:01:20,390
Now with that, with everything set up, that should bring back our styles for the persons.

17
00:01:20,420 --> 00:01:22,030
So if we toggle them,

18
00:01:22,290 --> 00:01:22,730
yes

19
00:01:22,730 --> 00:01:26,530
the styling is back but the data is missing

20
00:01:26,540 --> 00:01:28,610
and do you know what's wrong here?

21
00:01:30,510 --> 00:01:37,110
The data is missing because what we're doing is we're taking our person component and right before we

22
00:01:37,110 --> 00:01:40,770
export it, we pass it into the withClass function.

23
00:01:40,770 --> 00:01:46,380
Now what does the withClass function do? The withClass function takes the component and outputs it

24
00:01:46,620 --> 00:01:53,070
not before wrapping it into an extra div that adds the CSS class. The div doesn't really matter but

25
00:01:53,640 --> 00:02:00,360
what is missing on the wrapped component which in the case of the person component being passed is just

26
00:02:00,660 --> 00:02:02,410
our person component.

27
00:02:02,630 --> 00:02:04,560
Well it's missing all its props,

28
00:02:04,670 --> 00:02:09,110
I'm outputting wrapped components like this and I haven't set any props here.

29
00:02:09,110 --> 00:02:15,290
Of course we could set name as a prop here but for one, this is now hardcoded and second, now every

30
00:02:15,290 --> 00:02:21,560
component using that higher order component would receive Maximilian as we can see here and that is certainly

31
00:02:21,560 --> 00:02:25,270
not what we want, even though it's a great name of course.

32
00:02:25,420 --> 00:02:32,620
Well, we can pass props dynamically and that is a pretty powerful feature of Javascript and React.

33
00:02:32,620 --> 00:02:40,690
We actually do accept our props here and this will be the props of our wrapped component because we

34
00:02:40,990 --> 00:02:44,640
return this functional component in our higher order component,

35
00:02:44,800 --> 00:02:51,220
so ultimately, this withClass finger returns the functional component that wraps our person component.

36
00:02:51,610 --> 00:02:58,360
So we export whatever withClass returns, so we export this functional component returned by withClass and

37
00:02:58,360 --> 00:03:04,840
therefore anyone importing from person component and using the export here as person, as we do it here

38
00:03:04,840 --> 00:03:06,490
in the persons file,

39
00:03:06,490 --> 00:03:11,490
this here refers just to the result of the withClass call.

40
00:03:11,680 --> 00:03:18,490
So it refers to this functional component and therefore any props we pass to person here in the persons

41
00:03:18,490 --> 00:03:23,080
component will end up in our withClass component here.

42
00:03:23,170 --> 00:03:29,140
So props will actually be the right props and now we can use a JSX syntax that allows us to forward

43
00:03:29,140 --> 00:03:31,600
props to the wrapped component.

44
00:03:31,600 --> 00:03:38,740
Now what doesn't work is that we set props equal to props because React automatically takes all

45
00:03:38,740 --> 00:03:44,810
the attributes you add to your JSX code and combines them in a props object.

46
00:03:44,920 --> 00:03:51,310
So now props would not replace that props object but be added as a single property in the props passed

47
00:03:51,310 --> 00:03:52,720
to the wrapped component.

48
00:03:53,080 --> 00:03:58,870
But instead, you can use another syntax where you use curly braces and then a feature called the spread

49
00:03:58,930 --> 00:04:05,530
operator where you spread the props you're getting. The props you're getting here is a Javascript object

50
00:04:05,860 --> 00:04:13,960
and the spread operator pulls out all the properties that are inside of this props object and distributes

51
00:04:13,960 --> 00:04:18,100
them as new key-value pairs on this wrapped component.

52
00:04:18,100 --> 00:04:27,100
So if props here is a Javascript object with a name of Maximilian and an age of 28, then this syntax here

53
00:04:27,310 --> 00:04:34,960
will effectively set name equal to Maximilian and age equal to 28, like this.

54
00:04:34,960 --> 00:04:40,810
This is in the end what will happen here automatically behind the scenes for you. And therefore now

55
00:04:40,840 --> 00:04:42,890
with this setup here,

56
00:04:42,940 --> 00:04:50,580
if we save that, on the reloaded page, you'll see our data is back and it works just as it did before,

57
00:04:50,950 --> 00:04:55,960
thanks to props being used and props being passed to the wrapped component here.
