1
00:00:02,190 --> 00:00:08,070
We learned about the context API and this way of using it is perfectly fine but there is a more elegant

2
00:00:08,070 --> 00:00:10,600
way for using it in class-based components

3
00:00:10,680 --> 00:00:15,240
and of course, there also is an alternative way for using it in functional components,

4
00:00:15,240 --> 00:00:17,630
so let's have a look at these two alternative ways

5
00:00:17,700 --> 00:00:23,460
now. Now let's start in the person component which is a class-based component. In class-based components and

6
00:00:23,520 --> 00:00:31,800
only there, you can use an alternative pattern to using that authContext consumer that gets this function

7
00:00:32,490 --> 00:00:38,100
because not only is this code a bit verbose and can be tricky to wrap your head around when you see it

8
00:00:38,100 --> 00:00:39,250
the first time,

9
00:00:39,420 --> 00:00:46,920
it also only gives you access to the context in your JSX code here, where you render authContext consumer.

10
00:00:46,920 --> 00:00:52,860
Now what if you wanted to have access to it in componentDidMount because here you also need the authentication

11
00:00:52,860 --> 00:00:56,390
status because you are maybe sending an HTTP request

12
00:00:56,400 --> 00:00:58,640
that needs the user ID?

13
00:00:59,820 --> 00:01:05,640
Well then you would have no chance to access the context in componentDidMount when injecting or when

14
00:01:05,640 --> 00:01:07,620
using the context like this.

15
00:01:07,740 --> 00:01:09,780
Thankfully, React 16.6

16
00:01:09,780 --> 00:01:20,280
added another way of using context. You can add a special static property named contextType.

17
00:01:20,280 --> 00:01:27,840
Now this has to be named contextType, written exactly like this and it has to be a static property. Static

18
00:01:27,840 --> 00:01:29,350
property means that

19
00:01:29,490 --> 00:01:35,550
it can be accessed from outside without the need to instantiate an object based on this class first

20
00:01:36,030 --> 00:01:44,120
and React will access contextType for you, so to say. Now we set a value here and that value should be

21
00:01:44,120 --> 00:01:45,930
your authContext, just like this,

22
00:01:45,980 --> 00:01:47,450
not as JSX code,

23
00:01:47,450 --> 00:01:48,110
nothing else,

24
00:01:48,110 --> 00:01:50,580
just the authContext object.

25
00:01:50,810 --> 00:01:55,850
Now this allows React to automatically connect this component here,

26
00:01:55,850 --> 00:02:02,930
this class-based component to your context behind the scenes and it gives you a new property in this

27
00:02:02,930 --> 00:02:08,510
component, the this context property. We can now console log

28
00:02:08,510 --> 00:02:14,360
this context here and again, this context, it has to be written like this because this is given to you

29
00:02:14,360 --> 00:02:16,850
by React automatically

30
00:02:16,850 --> 00:02:22,250
and there, we can access login for example or authenticated which was our context

31
00:02:22,250 --> 00:02:25,110
property holding true or false.

32
00:02:25,220 --> 00:02:32,540
This allows us to get access to our context even in places like componentDidMount where we previously

33
00:02:32,540 --> 00:02:33,620
couldn't.

34
00:02:33,620 --> 00:02:37,650
And you can of course also use this context in your render function,

35
00:02:37,850 --> 00:02:45,700
so instead of using authContext consumer here, you can get rid of that like this and like this and instead

36
00:02:45,710 --> 00:02:52,240
wrap this here with curly braces because we have some Javascript code here, not just JSX and now

37
00:02:52,240 --> 00:02:58,030
here it's this context, referring to this context property React gives you.

38
00:02:58,030 --> 00:03:05,020
And if you now save that, you see in your console log, false here three times because we have three persons

39
00:03:05,380 --> 00:03:11,140
and that is your authentication context being logged and you see please login is shown because we're

40
00:03:11,140 --> 00:03:13,700
not authenticated. And if I press login,

41
00:03:13,720 --> 00:03:17,070
this changes because this works entirely as before

42
00:03:17,380 --> 00:03:23,980
but now with this more convenient static context type. Now this can be used in class-based components

43
00:03:24,010 --> 00:03:29,920
and I recommend using it there because it's shorter, it's easier in my opinion and it gives you access

44
00:03:29,920 --> 00:03:36,080
to contexts in places where you previously had no access. In functional components,

45
00:03:36,080 --> 00:03:37,440
this is not available.

46
00:03:37,460 --> 00:03:44,000
So there, we right now only can use authContext consumer because you can't set up a static property here.

47
00:03:44,570 --> 00:03:48,140
Thankfully, React has you covered with hooks.

48
00:03:48,470 --> 00:03:55,460
You can import the use context hook and this now allows you to get access to your context anywhere in

49
00:03:55,460 --> 00:04:02,990
your functional component function body, like here. There I could have my authContext and you can name

50
00:04:02,990 --> 00:04:10,160
this whatever you want and you simply use context like this and as an argument, you of course pass your

51
00:04:10,280 --> 00:04:11,970
authContext object

52
00:04:12,050 --> 00:04:16,280
and here again, React will make the connection for you behind the scenes.

53
00:04:16,280 --> 00:04:22,600
So now authContext will be a constant that holds information about your authContext data.

54
00:04:22,610 --> 00:04:29,150
So here we can console log authContext authenticated for example and we can of course also use that

55
00:04:29,150 --> 00:04:30,960
in our JSX code down there.

56
00:04:30,980 --> 00:04:37,520
So let's get rid of authContext consumer and of that function syntax and just output the JSX code for

57
00:04:37,520 --> 00:04:41,570
the button and here instead of context, we now use authContext,

58
00:04:41,600 --> 00:04:48,120
so this constant I just created. And now with that saved, if I press login,

59
00:04:48,160 --> 00:04:49,150
it still works

60
00:04:49,180 --> 00:04:56,320
as before now using the used context hook. So use context is to functional components

61
00:04:56,320 --> 00:05:02,560
what static context type is to class-based components you could say. It gives you access to the context

62
00:05:02,800 --> 00:05:10,450
and the context, the context API is all about managing data across components without the need to pass

63
00:05:10,450 --> 00:05:17,470
data around with props. We'll also learn a different concept that helps us with this, Redux later in the

64
00:05:17,470 --> 00:05:20,590
course and we'll use Redux later in the course

65
00:05:20,650 --> 00:05:26,470
but knowing the context API is important because you can build exciting things with that and it will

66
00:05:26,470 --> 00:05:29,470
also make it easier to understand that Redux thing later

67
00:05:29,470 --> 00:05:30,670
once we dive into that.
