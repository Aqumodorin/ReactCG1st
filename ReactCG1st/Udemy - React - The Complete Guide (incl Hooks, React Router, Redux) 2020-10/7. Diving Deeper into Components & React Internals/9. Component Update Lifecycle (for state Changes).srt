1
00:00:02,390 --> 00:00:06,430
That was the updating lifecycle for prop changes.

2
00:00:06,440 --> 00:00:12,860
Most important takeaway, the hook you'll use by far most often will be componentDidUpdate which is

3
00:00:12,980 --> 00:00:19,080
after the update finished when you for example need to fetch new data from a server.

4
00:00:19,100 --> 00:00:24,450
Let's now also have a look at the lifecycle hook for internal changes when the state changes and

5
00:00:24,620 --> 00:00:29,510
we can do that with the help of app.js. In there, we do change the state

6
00:00:29,510 --> 00:00:34,710
after all when people enter something into one of our person inputs and therefore in there,

7
00:00:34,730 --> 00:00:43,370
let's also add after componentDidMount, componentDidUpdate and you could also add the get snapshot

8
00:00:43,370 --> 00:00:54,240
before update hook in here if you wanted to. I'll leave it to be and just add componentDidUpdate and I'll

9
00:00:54,240 --> 00:01:00,600
add one other hook before componentDidUpdate and that will be shouldComponentUpdate where I get

10
00:01:00,600 --> 00:01:11,520
my next props and my next state and therefore here, I will also console log app.js

11
00:01:11,530 --> 00:01:17,010
shouldComponentUpdate.

12
00:01:17,240 --> 00:01:19,940
Let's see if these hooks are triggered as well.

13
00:01:19,940 --> 00:01:25,460
So if I reload here, toggle persons, then I actually fail,

14
00:01:25,460 --> 00:01:26,180
do you know why?

15
00:01:26,870 --> 00:01:32,520
Well, it basically actually gives us the reason here. shouldComponentUpdate as I mentioned earlier has

16
00:01:32,520 --> 00:01:33,430
to return something

17
00:01:33,800 --> 00:01:35,340
and if you're returning undefined

18
00:01:35,350 --> 00:01:39,030
this is basically treated as false and therefore blocks the update.

19
00:01:39,030 --> 00:01:43,930
So if I return false here for example to make this even clearer, I'll not get the warning anymore but

20
00:01:43,940 --> 00:01:47,190
toggling will not work because I'm preventing the update, here

21
00:01:47,280 --> 00:01:52,610
the update would be necessary though because the update would render all these person items but if I'm

22
00:01:52,610 --> 00:01:57,090
preventing it because I know better, well then this is not going to happen.

23
00:01:57,140 --> 00:02:02,060
Of course, we'll learn the smart way of using shouldComponentUpdate in this module too.

24
00:02:02,120 --> 00:02:07,370
So for now, I'll just set this to true to always allow the update which by the way is also the default

25
00:02:07,400 --> 00:02:12,650
if you don't include this hook, then it also always lets React go ahead.

26
00:02:12,650 --> 00:02:14,290
So now we see that again

27
00:02:14,570 --> 00:02:21,230
and now if I type one character, we see we get the update from app.js, getDerivedStateFromProps then

28
00:02:21,230 --> 00:02:27,860
we get shouldComponentUpdate here, render, then we we're in the persons.js updating hook and then

29
00:02:27,860 --> 00:02:35,320
in the end, we're at componentDidUpdate for app.js. So we spend a lot of time on all these lifecycle

30
00:02:35,340 --> 00:02:39,520
hooks and knowing them is important. When you're working with class-based components,

31
00:02:39,600 --> 00:02:45,390
it's important that you know how they actually are created and where you can execute your custom code

32
00:02:45,420 --> 00:02:47,620
during that lifecycle process.

33
00:02:47,880 --> 00:02:54,150
Important, componentDidMount, componentDidUpdate and also for performance improvements, shouldComponentUpdate

34
00:02:54,150 --> 00:02:59,700
are the most important hooks because in componentDidMount and componentDidUpdate, you will

35
00:02:59,700 --> 00:03:04,520
typically do things like fetching new data from a server, shouldComponentUpdate,

36
00:03:04,590 --> 00:03:09,760
well we'll dive into that again in this module, can be used for performance improvements.

37
00:03:10,170 --> 00:03:12,630
But what about functional components?

38
00:03:12,630 --> 00:03:18,510
I mentioned that the lifecycle is only available for class-based components and prior to the introduction

39
00:03:18,510 --> 00:03:23,940
of React hooks, functional components had nothing that would compare to that which was fine because we

40
00:03:23,940 --> 00:03:26,640
only use them for presentational purposes.

41
00:03:26,850 --> 00:03:32,040
But now with React hooks, you can actually build your entire React app with functional components only

42
00:03:32,190 --> 00:03:38,760
because you can manage the state in there. So you should also have a tool for running some code whenever

43
00:03:38,760 --> 00:03:45,310
the component updates or when it is created and therefore what is the equivalent to these lifecycle

44
00:03:45,330 --> 00:03:47,130
hooks for functional components?
