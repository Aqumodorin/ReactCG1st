1
00:00:02,280 --> 00:00:03,890
useEffect is pretty nice,

2
00:00:03,890 --> 00:00:05,270
what about cleanup work?

3
00:00:05,300 --> 00:00:10,400
And actually, I haven't even shown you this with the other components, with the class-based ones,

4
00:00:10,430 --> 00:00:11,970
so let's start with those.

5
00:00:12,130 --> 00:00:17,450
The persons.js component is a component which will actually get removed from the DOM

6
00:00:17,450 --> 00:00:22,080
when we click toggle person. Now let's say in that case you want to do some cleanup work,

7
00:00:22,220 --> 00:00:27,320
let's say in that scenario you want to cleanup some event listeners you set up somewhere, anything like

8
00:00:27,320 --> 00:00:27,530
that,

9
00:00:27,560 --> 00:00:29,530
any cleanup work you want to do.

10
00:00:29,570 --> 00:00:35,690
We got no such cleanup work here but in an app where you do have a live connection to some server or

11
00:00:35,690 --> 00:00:41,210
something like that, it's a very realistic scenario that you do have to cleanup some stuff. In a class

12
00:00:41,210 --> 00:00:42,620
based component for this,

13
00:00:42,680 --> 00:00:56,990
you can add componentWillUnmount here and therefore here, I'll console log persons.js

14
00:00:57,280 --> 00:00:58,220
componentWillUnmount,

15
00:00:58,280 --> 00:01:00,960
we saw that on a slide earlier as well.

16
00:01:00,960 --> 00:01:02,440
If I now save that, this reloads,

17
00:01:02,450 --> 00:01:10,390
I get my alert here, I can toggle and now if I toggle again, here we see componentWillUnmount from persons.js.

18
00:01:10,400 --> 00:01:16,370
Now in here, you could have any code that needs to run right before the component is removed,

19
00:01:16,370 --> 00:01:23,980
so right before you get rid of it. If you're using hooks like we're doing in the cockpit.js file, then

20
00:01:23,980 --> 00:01:28,140
you also can use useEffect for this cleanup work.

21
00:01:28,150 --> 00:01:29,050
How does that work?

22
00:01:29,650 --> 00:01:32,620
Well in your function you pass to your effect,

23
00:01:32,620 --> 00:01:39,310
so in this anonymous arrow function here in my case, you can return either nothing, so you don't have to

24
00:01:39,310 --> 00:01:40,420
have a return statement

25
00:01:40,420 --> 00:01:43,770
but if you add one, you can return a function here,

26
00:01:43,780 --> 00:01:49,950
so here I'm using yet another anonymous function that will actually run after every render cycle.

27
00:01:50,290 --> 00:02:02,190
So here I can console log cockpit.js cleanup work in useEffect. With that added,

28
00:02:02,200 --> 00:02:07,030
let's see what this does. If I reload,

29
00:02:07,030 --> 00:02:09,670
I get this alert and this is it,

30
00:02:09,670 --> 00:02:10,840
we have useEffect here.

31
00:02:13,970 --> 00:02:19,580
What you won't see is anything else, you never see that cleanup work thing because the cockpit component

32
00:02:19,580 --> 00:02:21,990
is actually never removed.

33
00:02:22,290 --> 00:02:28,610
Now to demonstrate how to get rid of it though, let's go to the app.js file

34
00:02:32,020 --> 00:02:38,370
and let's add a new button here, remove cockpit, just so that we can get rid of it

35
00:02:38,500 --> 00:02:46,370
and in here I will simply quick and dirty set some state which I initialize up here, show cockpit. Initially

36
00:02:46,370 --> 00:02:47,060
that is true,

37
00:02:47,080 --> 00:02:53,360
so we start with a cockpit and then in here on this button, I'll add an onClick listener and I'll now really

38
00:02:53,360 --> 00:02:58,580
just do this quick and dirty and add an inline event handler, so an anonymous function which gets executed

39
00:02:58,580 --> 00:03:03,730
when the click occurs and there I'll call this set state

40
00:03:03,860 --> 00:03:06,750
and I'll set showCockpit to false.

41
00:03:06,830 --> 00:03:10,110
Now with that set to false when we click the button,

42
00:03:10,310 --> 00:03:17,360
now we can just wrap this here and check whether this state showCockpit is true and if it is, we do

43
00:03:17,360 --> 00:03:22,390
render the cockpit and otherwise, we render nothing.

44
00:03:22,470 --> 00:03:27,780
The result of this is that we start with a cockpit of course but now we have that remove cockpit button

45
00:03:27,780 --> 00:03:35,840
if I click this, you actually see cleanup work in useEffect. That is coming from our React hook here

46
00:03:35,840 --> 00:03:44,000
of course because that runs right when useEffect runs for the last time so to say. Now when this is the

47
00:03:44,000 --> 00:03:51,090
case depends on this second argument you passed to useEffect. If you passed an empty array, useEffect

48
00:03:51,090 --> 00:03:55,720
will basically execute this function only, this function here,

49
00:03:55,820 --> 00:04:00,130
only when that component rendered and when it is unmounted.

50
00:04:00,140 --> 00:04:03,110
Now let me add another useEffect call here,

51
00:04:03,110 --> 00:04:11,410
as I mentioned you can have more than one which executes another anonymous function and here, I will

52
00:04:11,770 --> 00:04:19,150
copy that console log for my second useEffect and I will re-copy that return statement here and

53
00:04:19,150 --> 00:04:23,150
here, I have cleanup work in second useEffect.

54
00:04:23,170 --> 00:04:29,920
Now please note that the second useEffect has no second argument, so I'm not controlling when this should

55
00:04:29,920 --> 00:04:33,490
run and therefore it will run for every update cycle.

56
00:04:33,490 --> 00:04:40,770
So now what we see is, here we have the second useEffect and already now when I just toggle persons,

57
00:04:40,780 --> 00:04:46,260
so I'm not doing anything with the cockpit, if I toggle persons, we got cockpit second useEffect

58
00:04:46,270 --> 00:04:50,410
but before that, we had the cleanup work in the second useEffect.

59
00:04:50,410 --> 00:04:56,250
Now this can also be useful in case you have some operation which actually should be canceled whenever

60
00:04:56,290 --> 00:04:57,670
the component re-renders,

61
00:04:57,760 --> 00:05:00,640
so after it updated so to say.

62
00:05:00,640 --> 00:05:05,830
So this is an extra bit of flexibility, that you have this cleanup function here and you can either let

63
00:05:05,830 --> 00:05:13,300
this run when the component gets destroyed by passing an empty array as a second argument or it runs

64
00:05:13,300 --> 00:05:19,240
on every update cycle with no argument or you pass a second argument which is an array that lists

65
00:05:19,300 --> 00:05:19,990
all the data

66
00:05:19,990 --> 00:05:25,450
this should watch and only when that data changes, it'll run the function in useEffect and it will

67
00:05:25,450 --> 00:05:32,390
then run the cleanup function too. Now that was a lot about lifecycle hooks and useEffect,

68
00:05:32,390 --> 00:05:38,150
now I know that a lot of this stuff is still very abstract here because we haven't really used it in

69
00:05:38,150 --> 00:05:39,140
a real project.

70
00:05:39,260 --> 00:05:44,960
We'll do so throughout the course, though there definitely are also scenarios and lifecycle hooks we'll

71
00:05:44,960 --> 00:05:48,320
rarely use because you do rarely use them.

72
00:05:48,380 --> 00:05:53,480
I've found it important to walk you through them so that you are aware of them so that we can now use

73
00:05:53,480 --> 00:05:54,370
them in a project

74
00:05:54,440 --> 00:05:59,330
and when we talk about hooks, there we'll have an entire module towards the end of the course where I'll

75
00:05:59,330 --> 00:06:03,770
take the finished course project and convert it to use React hooks only,

76
00:06:03,890 --> 00:06:07,540
so if you want to learn more about that, that will be covered as well.

77
00:06:07,850 --> 00:06:13,640
For now, let's move on with some performance optimizations and shouldComponentUpdate though because

78
00:06:13,670 --> 00:06:18,740
that is super important to know how to use since it's a powerful tool.

79
00:06:18,740 --> 00:06:20,930
Right now I'm always returning true and

80
00:06:20,930 --> 00:06:27,010
what this basically means is that React always goes ahead and re-renders the entire component tree

81
00:06:27,020 --> 00:06:30,710
for this component whenever something changes in this component.

82
00:06:30,710 --> 00:06:35,930
As I mentioned a couple of times, this does not mean that it updates the real DOM as you will learn but

83
00:06:35,930 --> 00:06:40,490
still, it does check whether it needs to update the real DOM internally

84
00:06:40,490 --> 00:06:44,190
and if we can prevent this, we can already save some performance.

85
00:06:44,240 --> 00:06:46,730
So how can we work with shouldComponentUpdate then?
