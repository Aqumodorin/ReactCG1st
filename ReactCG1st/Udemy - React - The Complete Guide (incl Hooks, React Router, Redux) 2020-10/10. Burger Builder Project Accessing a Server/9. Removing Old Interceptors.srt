1
00:00:02,190 --> 00:00:07,140
Now in this module, we obviously added a lot of logic to our burger builder again.

2
00:00:07,140 --> 00:00:14,550
There is one improvement or fix we should apply to it though, can be subtle to spot but it really improves

3
00:00:14,550 --> 00:00:16,130
our application,

4
00:00:16,140 --> 00:00:20,540
Let's have a look at this withErrorHandler higher order component.

5
00:00:20,730 --> 00:00:25,530
There we obviously added Our interceptors in componentWillMount

6
00:00:25,530 --> 00:00:30,480
and of course it makes sense to add them there because we wanted to make sure that we can intercept

7
00:00:30,600 --> 00:00:37,050
errors and hence show this error modal we set up in this higher order component,

8
00:00:37,050 --> 00:00:44,280
we have one issue though. This withErrorHandler method can be wrapped around multiple components,

9
00:00:44,310 --> 00:00:47,580
that's the whole idea of having this higher order component

10
00:00:47,880 --> 00:00:52,940
otherwise we could have put that code directly into the burger builder if that were the only component

11
00:00:52,980 --> 00:00:54,190
where we want to use that.

12
00:00:54,300 --> 00:00:56,900
Right now, it is the only component, we're using it

13
00:00:56,910 --> 00:01:03,140
but again our higher order component is of course not limited to the burger builder.

14
00:01:03,180 --> 00:01:12,060
The problem we have is if we add this higher order component, withErrorHandler to other components,

15
00:01:12,510 --> 00:01:18,810
we'll call componentWillMount again and again of course because the class component we return it is

16
00:01:18,810 --> 00:01:26,310
higher order component is created every time this is wrapped around an existing component,

17
00:01:26,310 --> 00:01:34,950
so every time we call withErrorHandler on the element we're exporting as we do in the burger builder.

18
00:01:34,980 --> 00:01:40,450
So we're actually attaching multiple interceptors in our application and we're attaching them to the

19
00:01:40,450 --> 00:01:42,850
same axios instance.

20
00:01:43,050 --> 00:01:45,200
The problem of course is and we don't have that

21
00:01:45,200 --> 00:01:51,260
right now and we will face later in the course, the mentioned routing will lead to the problem,

22
00:01:51,300 --> 00:01:58,800
once we have more pages where we might use withErrorHandler, we of course create this instance here

23
00:01:58,800 --> 00:02:05,430
multiple times, this component here and therefore all the old interceptors, so all the interceptors we

24
00:02:05,430 --> 00:02:12,200
set up when we wrapped this around another component which might not be needed anymore still exist.

25
00:02:12,210 --> 00:02:18,240
So we have a lot of that interceptor sitting in memory which actually are not that but which still

26
00:02:18,480 --> 00:02:28,530
react to our requests and in the worst case, they lead to errors or do somehow change the state of

27
00:02:28,530 --> 00:02:29,620
our application

28
00:02:29,670 --> 00:02:36,450
but even in the best case, they leak memory because that's code that still runs that is not required

29
00:02:36,450 --> 00:02:37,500
anymore.

30
00:02:37,500 --> 00:02:43,830
So we should actually remove the interceptors when this component gets unmounted,

31
00:02:43,890 --> 00:02:51,720
so when this specific instance of our withErrorHandler wrapper is not needed anymore and there actually

32
00:02:51,810 --> 00:02:59,300
is a lifecycle hook for this too, it's componentWillUnmount.

33
00:02:59,430 --> 00:03:06,480
Now as the name suggests, this is a lifecycle method which is executed at the point of time a component

34
00:03:06,600 --> 00:03:08,130
isn't required anymore.

35
00:03:08,550 --> 00:03:13,530
Alternatively if you're using a functional component here and you're not returning this class-based

36
00:03:13,530 --> 00:03:14,430
component,

37
00:03:14,430 --> 00:03:20,490
so if you're effectively using the useEffect hook thus far, then you would write this code in the return

38
00:03:20,490 --> 00:03:27,120
function of useEffect since this function runs whenever the cleanup is done for this component.

39
00:03:27,450 --> 00:03:35,160
Now to be able to remove an interceptor here, we need to store a reference to the interceptors we create

40
00:03:35,490 --> 00:03:38,130
in properties of this class.

41
00:03:38,160 --> 00:03:40,560
Now we have the state property already,

42
00:03:40,560 --> 00:03:43,720
we can simply add new properties.

43
00:03:43,830 --> 00:03:51,150
So for that, I will simply create a new property on the fly by using this,

44
00:03:51,150 --> 00:03:55,240
the this keyword to refer to the class and then any name of your choice,

45
00:03:55,380 --> 00:03:59,910
I'll name this the request interceptor, maybe like this,

46
00:03:59,910 --> 00:04:08,440
request interceptor and we'll store the result of our interceptor setup which is just a reference to the

47
00:04:08,440 --> 00:04:16,810
interceptor passed back by axios automatically and I'll do the same for the response interceptor here.

48
00:04:16,810 --> 00:04:25,450
So now I have two new properties in my class and I can now use these properties in will unmount to remove

49
00:04:25,450 --> 00:04:27,670
the interceptors. There

50
00:04:27,670 --> 00:04:36,310
we can now simply use axios interceptors, just like we created them but now we can also access request

51
00:04:36,340 --> 00:04:39,630
and response there and call eject and eject

52
00:04:39,640 --> 00:04:43,100
now requires the reference to the interceptor.

53
00:04:43,120 --> 00:04:51,260
So here, this request interceptor and I'll simply duplicate this to also do the same for the response,

54
00:04:51,280 --> 00:04:57,530
so for the response object, I'll call eject and then call response interceptor.

55
00:04:57,880 --> 00:05:03,370
And now with that, we got this set up in componentWillUnmount and we should remove our interceptors

56
00:05:03,370 --> 00:05:06,450
with that preventing memory leaks.

57
00:05:06,460 --> 00:05:12,820
Now to quickly see if that works, I'll save that file and then I'll go into the app.js file which

58
00:05:12,820 --> 00:05:19,840
is where we add the burger builder and I want to add some code to remove it after some time just to see

59
00:05:19,840 --> 00:05:22,300
if will unmount gets called.

60
00:05:22,300 --> 00:05:31,180
So there, I will simply console log will unmount and I want to output this request interceptor and

61
00:05:31,180 --> 00:05:37,480
this response interceptor, the two properties we added to see if they are set at the beginning of will unmount

62
00:05:37,510 --> 00:05:40,100
because I'm using them thereafter.

63
00:05:40,120 --> 00:05:45,940
So now with that saved, let's go back to app.js and to make sure that burger builder disappears after

64
00:05:46,120 --> 00:05:52,540
a while, I'll temporarily add a state to my app component, it is a class-based component so I can of course

65
00:05:52,540 --> 00:05:59,680
do this and I will simply add a show property which is true initially and I will then use it here with

66
00:05:59,680 --> 00:06:05,710
this state show to show the burger builder or show null which essentially removes the burger builder

67
00:06:05,710 --> 00:06:10,120
of course because it's only added to the DOM if show is true.

68
00:06:10,150 --> 00:06:15,840
So now I just need a way to unset show after a while and for that

69
00:06:15,850 --> 00:06:21,490
and again this is all just for testing, I'll add componentDidMount here and there I will simply use

70
00:06:21,490 --> 00:06:25,210
the normal set timeout method provided by Javascript

71
00:06:25,210 --> 00:06:33,730
and after 5 seconds, I want to execute this function here and in that function, I'll call set state and

72
00:06:33,730 --> 00:06:35,460
set show to false

73
00:06:35,470 --> 00:06:38,080
and again I will remove this code in a second,

74
00:06:38,080 --> 00:06:44,430
it's only there to test if this works, if it does call will unmount.

75
00:06:44,470 --> 00:06:50,710
So with that, that let's save this and now let's reload the application, we see the burger and let's wait

76
00:06:50,710 --> 00:06:55,090
five seconds and we should then see will unmount

77
00:06:55,120 --> 00:06:56,900
and we see zero zero

78
00:06:57,030 --> 00:07:00,460
and that's actually correct because these are simply the IDs.

79
00:07:00,460 --> 00:07:07,960
There are IDs being kept the memory by axios for both the request and response interceptors, so two

80
00:07:07,960 --> 00:07:11,420
different lists of interceptors and they start with index zero.

81
00:07:11,440 --> 00:07:12,790
We added one to each list,

82
00:07:12,790 --> 00:07:14,980
one request and one response interceptor,

83
00:07:14,980 --> 00:07:17,380
so that is why we see two zeros here.

84
00:07:17,380 --> 00:07:19,890
So what we can see is it does work,

85
00:07:19,900 --> 00:07:27,670
we can now remove that console log statement from unmount, it does successfully get this reference

86
00:07:27,670 --> 00:07:34,780
to the interceptor and we can rely on eject working and this will just ensure that whenever we don't

87
00:07:34,840 --> 00:07:38,690
need the burger builder component anymore

88
00:07:38,830 --> 00:07:44,080
and of course this is not the case right now in the application but will soon be, that we clean up the

89
00:07:44,080 --> 00:07:51,640
interceptors which we attached due to using withErrorHandler on the burger builder so that if we reuse

90
00:07:51,640 --> 00:07:58,120
withErrorHandler in our application, we don't create more and more interceptors with the old ones living

91
00:07:58,120 --> 00:07:58,490
on.

92
00:07:59,080 --> 00:08:07,320
So with that, I can remove my code here in the app.js file to have a normally working application again,

93
00:08:07,330 --> 00:08:14,350
so I'll remove all the code we added, the state and componentDidMount with the set timeout, so that we have

94
00:08:14,350 --> 00:08:17,050
the same app component as before

95
00:08:17,050 --> 00:08:22,720
but now again with the improved application where we actually remove interceptors we don't need anymore.
